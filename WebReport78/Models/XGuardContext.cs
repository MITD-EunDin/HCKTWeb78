// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace WebReport78.Models;

public partial class XGuardContext : DbContext
{
    public XGuardContext(DbContextOptions<XGuardContext> options)
        : base(options)
    {
    }

    public virtual DbSet<DutyShift> DutyShifts { get; set; }

    public virtual DbSet<Identity> Identities { get; set; }

    public virtual DbSet<Source> Sources { get; set; }

    public virtual DbSet<Staff> Staff { get; set; }

    public virtual DbSet<StaffIdentity> StaffIdentities { get; set; }

    public virtual DbSet<Vehicle> Vehicles { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<DutyShift>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DutyShif__3213E83FD7C7E2A9");

            entity.ToTable("DutyShift");

            entity.HasIndex(e => new { e.MothYearImport, e.Id }, "UQ_DutySchedules_MonthYear_Id").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.DateCreated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("date_created");
            entity.Property(e => e.DateUpdate)
                .HasColumnType("datetime")
                .HasColumnName("date_update");
            entity.Property(e => e.Dateduty).HasColumnName("dateduty");
            entity.Property(e => e.Department)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("department");
            entity.Property(e => e.Fullname)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fullname");
            entity.Property(e => e.MothYearImport).HasColumnName("mothYear_import");
            entity.Property(e => e.Phonenumber)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("phonenumber");
            entity.Property(e => e.Rankk)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("rankk");
        });

        modelBuilder.Entity<Identity>(entity =>
        {
            entity.HasKey(e => e.Guid);

            entity.ToTable("Identity");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("guid");
            entity.Property(e => e.IdentityData).HasColumnName("identity_data");
            entity.Property(e => e.IdentityId)
                .HasComment("Fingerprint: 1-10")
                .HasColumnName("identity_id");
            entity.Property(e => e.IdentityTemplate)
                .HasMaxLength(50)
                .HasColumnName("identity_template");
            entity.Property(e => e.IdentityType)
                .HasMaxLength(50)
                .HasComment("normal, hijack, patrol, super, dismiss")
                .HasColumnName("identity_type");
            entity.Property(e => e.IdentityVerification)
                .HasComment("Card, Fingerprint, FaceID,...")
                .HasColumnName("identity_verification");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Source>(entity =>
        {
            entity.HasKey(e => e.Guid);

            entity.ToTable("Source");

            entity.HasIndex(e => new { e.Name, e.IdLocation }, "NonClusteredIndex-20250627-144557");

            entity.Property(e => e.Guid)
                .HasMaxLength(50)
                .HasColumnName("guid");
            entity.Property(e => e.AcCheckType).HasColumnName("ac_check_type");
            entity.Property(e => e.Code)
                .HasMaxLength(10)
                .HasColumnName("code");
            entity.Property(e => e.DateCreated).HasColumnName("date_created");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
            entity.Property(e => e.IdArea)
                .HasMaxLength(50)
                .HasColumnName("id_area");
            entity.Property(e => e.IdLocation)
                .HasMaxLength(50)
                .HasColumnName("id_location");
            entity.Property(e => e.IsCloudSynced).HasColumnName("is_cloud_synced");
            entity.Property(e => e.MainStreamTransport)
                .HasDefaultValue((byte)0)
                .HasColumnName("main_stream_transport");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.SourceInfo).HasColumnName("source_info");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.SubStreamTransport)
                .HasDefaultValue((byte)0)
                .HasColumnName("sub_stream_transport");
            entity.Property(e => e.Type).HasColumnName("type");
            entity.Property(e => e.UserPermission).HasColumnName("user_permission");
        });

        modelBuilder.Entity<Staff>(entity =>
        {
            entity.HasKey(e => e.GuidStaff).HasName("PK_StaffInfo_1");

            entity.HasIndex(e => new { e.Name, e.IdLocation }, "NonClusteredIndex-20250627-144232");

            entity.Property(e => e.GuidStaff)
                .HasMaxLength(50)
                .HasColumnName("guid_staff");
            entity.Property(e => e.Address)
                .HasMaxLength(100)
                .HasColumnName("address");
            entity.Property(e => e.Avatar)
                .HasMaxLength(255)
                .HasColumnName("avatar");
            entity.Property(e => e.CardIds)
                .HasMaxLength(100)
                .HasColumnName("card_ids");
            entity.Property(e => e.CardNum)
                .HasDefaultValue((byte)0)
                .HasColumnName("card_num");
            entity.Property(e => e.Code)
                .HasMaxLength(20)
                .HasColumnName("code");
            entity.Property(e => e.DateCreated)
                .HasColumnType("datetime")
                .HasColumnName("date_created");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.Dob).HasColumnName("dob");
            entity.Property(e => e.DocumentNumber)
                .HasMaxLength(20)
                .HasColumnName("document_number");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.EndTime).HasColumnName("end_time");
            entity.Property(e => e.FingerprintNum)
                .HasDefaultValue((byte)0)
                .HasColumnName("fingerprint_num");
            entity.Property(e => e.FrNum)
                .HasDefaultValue((byte)0)
                .HasColumnName("fr_num");
            entity.Property(e => e.Gender).HasColumnName("gender");
            entity.Property(e => e.Hometown)
                .HasMaxLength(100)
                .HasColumnName("hometown");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
            entity.Property(e => e.IdDept).HasColumnName("id_dept");
            entity.Property(e => e.IdLocation)
                .HasMaxLength(50)
                .HasColumnName("id_location");
            entity.Property(e => e.IdOrg).HasColumnName("id_org");
            entity.Property(e => e.IdTypePerson).HasColumnName("id_type_person");
            entity.Property(e => e.IrisNum)
                .HasDefaultValue((byte)0)
                .HasColumnName("iris_num");
            entity.Property(e => e.IsAccessDevicesSynced)
                .HasDefaultValue(false)
                .HasColumnName("is_access_devices_synced");
            entity.Property(e => e.IsAiBoxesSynced)
                .HasDefaultValue(false)
                .HasColumnName("is_ai_boxes_synced");
            entity.Property(e => e.IsCloudSynced)
                .HasDefaultValue(false)
                .HasColumnName("is_cloud_synced");
            entity.Property(e => e.IsGatewaySynced)
                .HasDefaultValue(false)
                .HasColumnName("is_gateway_synced");
            entity.Property(e => e.ListImage)
                .HasMaxLength(1000)
                .HasColumnName("list_image");
            entity.Property(e => e.LocalAvatar)
                .HasMaxLength(255)
                .HasColumnName("local_avatar");
            entity.Property(e => e.LprNum).HasColumnName("lpr_num");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.OrderNo)
                .HasDefaultValue((short)0)
                .HasColumnName("order_no");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .HasColumnName("phone");
            entity.Property(e => e.Position)
                .HasMaxLength(100)
                .HasColumnName("position");
            entity.Property(e => e.StartTime).HasColumnName("start_time");
            entity.Property(e => e.Status).HasColumnName("status");
        });

        modelBuilder.Entity<StaffIdentity>(entity =>
        {
            entity.HasKey(e => new { e.GuidStaff, e.GuidIdentity });

            entity.ToTable("Staff_Identity");

            entity.Property(e => e.GuidStaff)
                .HasMaxLength(50)
                .HasColumnName("guid_staff");
            entity.Property(e => e.GuidIdentity)
                .HasMaxLength(50)
                .HasColumnName("guid_identity");
            entity.Property(e => e.IdentityVerification).HasColumnName("identity_verification");
            entity.Property(e => e.Status)
                .HasDefaultValue((byte)0)
                .HasColumnName("status");

            entity.HasOne(d => d.GuidIdentityNavigation).WithMany(p => p.StaffIdentities)
                .HasForeignKey(d => d.GuidIdentity)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Staff_Identity_Identity");

            entity.HasOne(d => d.GuidStaffNavigation).WithMany(p => p.StaffIdentities)
                .HasForeignKey(d => d.GuidStaff)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Staff_Identity_Staff");
        });

        modelBuilder.Entity<Vehicle>(entity =>
        {
            entity.HasKey(e => e.Lpn).HasName("PK_Vehicle_1");

            entity.ToTable("Vehicle");

            entity.HasIndex(e => new { e.Lpn, e.IdLocation, e.IdStaff }, "NonClusteredIndex-20250627-145028");

            entity.Property(e => e.Lpn)
                .HasMaxLength(15)
                .HasColumnName("lpn");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasColumnName("address");
            entity.Property(e => e.ApprovedUser)
                .HasMaxLength(50)
                .HasColumnName("approved_user");
            entity.Property(e => e.ClassifyProfile)
                .HasMaxLength(100)
                .HasColumnName("classify_profile");
            entity.Property(e => e.ClassifyType).HasColumnName("classify_type");
            entity.Property(e => e.CreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("created_date");
            entity.Property(e => e.CreatedUser)
                .HasMaxLength(50)
                .HasColumnName("created_user");
            entity.Property(e => e.FullimagePath)
                .HasMaxLength(255)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("fullimage_path");
            entity.Property(e => e.IdLocation)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("id_location");
            entity.Property(e => e.IdStaff)
                .HasMaxLength(50)
                .HasColumnName("id_staff");
            entity.Property(e => e.IsDisplay)
                .HasDefaultValue(true)
                .HasColumnName("is_display");
            entity.Property(e => e.IsPriority)
                .HasDefaultValue(false)
                .HasColumnName("is_priority");
            entity.Property(e => e.IsViolation)
                .HasDefaultValue(false)
                .HasColumnName("is_violation");
            entity.Property(e => e.LoadingCapacity)
                .HasDefaultValue(0)
                .HasColumnName("loading_capacity");
            entity.Property(e => e.Note)
                .HasMaxLength(500)
                .HasColumnName("note");
            entity.Property(e => e.Owner)
                .HasMaxLength(255)
                .HasColumnName("owner");
            entity.Property(e => e.PlateimagePath)
                .HasMaxLength(255)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("plateimage_path");
            entity.Property(e => e.RegistrationDate)
                .HasColumnType("datetime")
                .HasColumnName("registration_date");
            entity.Property(e => e.RegistrationNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("registration_number");
            entity.Property(e => e.SeatCapacity)
                .HasDefaultValue(0)
                .HasColumnName("seat_capacity");
            entity.Property(e => e.Status)
                .HasDefaultValue((byte)0)
                .HasColumnName("status");
            entity.Property(e => e.TicketType)
                .HasMaxLength(15)
                .HasColumnName("ticket_type");
            entity.Property(e => e.TicketValue)
                .HasColumnType("money")
                .HasColumnName("ticket_value");
            entity.Property(e => e.ValidityEndDate)
                .HasColumnType("datetime")
                .HasColumnName("validity_end_date");
            entity.Property(e => e.ValidityStartDate)
                .HasColumnType("datetime")
                .HasColumnName("validity_start_date");

            entity.HasOne(d => d.IdStaffNavigation).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.IdStaff)
                .HasConstraintName("FK_Vehicle_Staff");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}